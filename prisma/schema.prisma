model Notification {
  id        String   @id @default(cuid())
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  userId    String
  type      String   // 'like' | 'comment' | 'follow-request'
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  fromUser  User?    @relation("NotificationFromUser", fields: [fromUserId], references: [id])
  fromUserId String?
  message   String?
  createdAt DateTime @default(now())
}
model FollowRequest {
  id           String   @id @default(cuid())
  requester    User     @relation("followRequestsSent", fields: [requesterId], references: [id])
  requesterId  String
  target       User     @relation("followRequestsReceived", fields: [targetId], references: [id])
  targetId     String
  status       String   // 'pending' | 'approved' | 'declined'
  createdAt    DateTime @default(now())

  @@unique([requesterId, targetId])
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // cambia in "postgresql" in prod
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  username      String   @unique
  email         String   @unique
  image         String?  // avatar URL
  bio           String?
  language      String?   // 'it' | 'fr' | 'en' | 'es'
  passwordHash  String?  // per credenziali
  createdAt     DateTime @default(now())

  posts         Post[]
  comments      Comment[]
  likes         Like[] @relation("UserLikes")
  followers     Follow[] @relation("followers")
  following     Follow[] @relation("following")

  followRequestsSent     FollowRequest[] @relation("followRequestsSent")
  followRequestsReceived FollowRequest[] @relation("followRequestsReceived")
  notifications         Notification[] @relation("UserNotifications")
  notificationsFrom      Notification[] @relation("NotificationFromUser")
}

model Post {
  id        String    @id @default(cuid())
  content   String
  mediaUrl  String?
  mediaType String?   // 'image' | 'video'
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[]
  notifications Notification[]
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation("UserLikes", fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  image     String?
  // Reply threading
  parent     Comment?  @relation("CommentToParent", fields: [parentId], references: [id])
  parentId   String?
  replies    Comment[] @relation("CommentToParent")
  createdAt DateTime @default(now())
}

model Follow {
  id           String   @id @default(cuid())
  follower     User     @relation("followers", fields: [followerId], references: [id])
  followerId   String
  following    User     @relation("following", fields: [followingId], references: [id])
  followingId  String
  createdAt    DateTime @default(now())

  @@unique([followerId, followingId])
}
